'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _cowsayBrowser = require('cowsay-browser');

var _cowsayBrowser2 = _interopRequireDefault(_cowsayBrowser);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Cowsay = function (_React$Component) {
	_inherits(Cowsay, _React$Component);

	function Cowsay() {
		_classCallCheck(this, Cowsay);

		return _possibleConstructorReturn(this, (Cowsay.__proto__ || Object.getPrototypeOf(Cowsay)).apply(this, arguments));
	}

	_createClass(Cowsay, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			// some logic here - we only test if the method is called
		}
	}, {
		key: 'getText',
		value: function getText() {
			var content = this.props.children || this.props.text;
			var text = null;
			if (content === undefined) {
				return 'Cowsay needs some text! Please add some to the text prop or as children.';
			} else if (typeof content !== 'string') {
				return 'Cowsay can only accept a string x.x';
			}
			return content;
		}
	}, {
		key: 'getAction',
		value: function getAction() {
			return this.props.think !== undefined ? 'think' : 'say';
		}
	}, {
		key: 'getOptions',
		value: function getOptions() {
			return Object.assign({
				text: this.getText()
			}, { W: 40 }, this.props);
		}
	}, {
		key: 'render',
		value: function render() {

			var cow = _cowsayBrowser2.default[this.getAction()](this.getOptions());
			return _react2.default.createElement(
				'pre',
				{ style: { textAlign: 'left' } },
				cow
			);
		}
	}]);

	return Cowsay;
}(_react2.default.Component);

;

exports.default = Cowsay;
module.exports = exports['default'];